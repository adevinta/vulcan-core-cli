// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "vulcan-persistence": Checks Resource Client
//
// Command:
// $ gen

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// AbortChecksPath computes a request path to the abort action of Checks.
func AbortChecksPath(id uuid.UUID) string {
	param0 := id.String()

	return fmt.Sprintf("/v1/checks/%s/abort", param0)
}

// Abort a Check gracefully
func (c *Client) AbortChecks(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAbortChecksRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAbortChecksRequest create the request corresponding to the abort action endpoint of the Checks resource.
func (c *Client) NewAbortChecksRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateChecksPath computes a request path to the create action of Checks.
func CreateChecksPath() string {

	return fmt.Sprintf("/v1/checks/")
}

// Create a new Check
func (c *Client) CreateChecks(ctx context.Context, path string, payload *CheckPayload) (*http.Response, error) {
	req, err := c.NewCreateChecksRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateChecksRequest create the request corresponding to the create action endpoint of the Checks resource.
func (c *Client) NewCreateChecksRequest(ctx context.Context, path string, payload *CheckPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// KillChecksPath computes a request path to the kill action of Checks.
func KillChecksPath(id uuid.UUID) string {
	param0 := id.String()

	return fmt.Sprintf("/v1/checks/%s/kill", param0)
}

// Kill a Check immediately
func (c *Client) KillChecks(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewKillChecksRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewKillChecksRequest create the request corresponding to the kill action endpoint of the Checks resource.
func (c *Client) NewKillChecksRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowChecksPath computes a request path to the show action of Checks.
func ShowChecksPath(id uuid.UUID) string {
	param0 := id.String()

	return fmt.Sprintf("/v1/checks/%s", param0)
}

// Get a Check by its ID
func (c *Client) ShowChecks(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowChecksRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowChecksRequest create the request corresponding to the show action endpoint of the Checks resource.
func (c *Client) NewShowChecksRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
