// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "vulcan-persistence": Application Media Types
//
// Command:
// $ gen

package client

import (
	"github.com/goadesign/goa"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"time"
	"unicode/utf8"
)

// Agent media type (default view)
//
// Identifier: application/vnd.agent+json; view=default
type Agent struct {
	Agent *Agentdata `form:"agent" json:"agent" yaml:"agent" xml:"agent"`
}

// Validate validates the Agent media type instance.
func (mt *Agent) Validate() (err error) {
	if mt.Agent == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "agent"))
	}
	if mt.Agent != nil {
		if err2 := mt.Agent.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeAgent decodes the Agent instance encoded in resp body.
func (c *Client) DecodeAgent(resp *http.Response) (*Agent, error) {
	var decoded Agent
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Agentdata media type (default view)
//
// Identifier: application/vnd.agentdata+json; view=default
type Agentdata struct {
	Enabled    bool      `form:"enabled" json:"enabled" yaml:"enabled" xml:"enabled"`
	HeartbetAt time.Time `form:"heartbet_at" json:"heartbet_at" yaml:"heartbet_at" xml:"heartbet_at"`
	ID         uuid.UUID `form:"id" json:"id" yaml:"id" xml:"id"`
	Jobqueue   *Jobqueue `form:"jobqueue" json:"jobqueue" yaml:"jobqueue" xml:"jobqueue"`
	Status     string    `form:"status" json:"status" yaml:"status" xml:"status"`
	Version    string    `form:"version" json:"version" yaml:"version" xml:"version"`
}

// Validate validates the Agentdata media type instance.
func (mt *Agentdata) Validate() (err error) {

	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	if mt.Version == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "version"))
	}

	if mt.Jobqueue == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "jobqueue"))
	}
	if mt.Jobqueue != nil {
		if err2 := mt.Jobqueue.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ok := goa.ValidatePattern(`^[[:word:]]+`, mt.Status); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.status`, mt.Status, `^[[:word:]]+`))
	}
	if utf8.RuneCountInString(mt.Status) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.status`, mt.Status, utf8.RuneCountInString(mt.Status), 1, true))
	}
	return
}

// DecodeAgentdata decodes the Agentdata instance encoded in resp body.
func (c *Client) DecodeAgentdata(resp *http.Response) (*Agentdata, error) {
	var decoded Agentdata
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Agentjobqueuedata media type (default view)
//
// Identifier: application/vnd.agentjobqueuedata+json; view=default
type Agentjobqueuedata struct {
	Arn         string    `form:"arn" json:"arn" yaml:"arn" xml:"arn"`
	Description string    `form:"description" json:"description" yaml:"description" xml:"description"`
	Enabled     bool      `form:"enabled" json:"enabled" yaml:"enabled" xml:"enabled"`
	ID          uuid.UUID `form:"id" json:"id" yaml:"id" xml:"id"`
}

// Validate validates the Agentjobqueuedata media type instance.
func (mt *Agentjobqueuedata) Validate() (err error) {

	if mt.Arn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "arn"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}

	return
}

// DecodeAgentjobqueuedata decodes the Agentjobqueuedata instance encoded in resp body.
func (c *Client) DecodeAgentjobqueuedata(resp *http.Response) (*Agentjobqueuedata, error) {
	var decoded Agentjobqueuedata
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Agents media type (default view)
//
// Identifier: application/vnd.agents+json; view=default
type Agents struct {
	Agents []*AgentData `form:"agents" json:"agents" yaml:"agents" xml:"agents"`
}

// Validate validates the Agents media type instance.
func (mt *Agents) Validate() (err error) {
	if mt.Agents == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "agents"))
	}
	for _, e := range mt.Agents {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAgents decodes the Agents instance encoded in resp body.
func (c *Client) DecodeAgents(resp *http.Response) (*Agents, error) {
	var decoded Agents
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Assettype media type (default view)
//
// Identifier: application/vnd.assettype+json; view=default
type Assettype struct {
	Assettype *string  `form:"assettype,omitempty" json:"assettype,omitempty" yaml:"assettype,omitempty" xml:"assettype,omitempty"`
	Name      []string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// DecodeAssettype decodes the Assettype instance encoded in resp body.
func (c *Client) DecodeAssettype(resp *http.Response) (*Assettype, error) {
	var decoded Assettype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AssettypeCollection is the media type for an array of Assettype (default view)
//
// Identifier: application/vnd.assettype+json; type=collection; view=default
type AssettypeCollection []*Assettype

// DecodeAssettypeCollection decodes the AssettypeCollection instance encoded in resp body.
func (c *Client) DecodeAssettypeCollection(resp *http.Response) (AssettypeCollection, error) {
	var decoded AssettypeCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Check media type (default view)
//
// Identifier: application/vnd.check+json; view=default
type Check struct {
	Check *Checkdata `form:"check" json:"check" yaml:"check" xml:"check"`
}

// Validate validates the Check media type instance.
func (mt *Check) Validate() (err error) {
	if mt.Check == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "check"))
	}
	if mt.Check != nil {
		if err2 := mt.Check.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeCheck decodes the Check instance encoded in resp body.
func (c *Client) DecodeCheck(resp *http.Response) (*Check, error) {
	var decoded Check
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Checkdata media type (default view)
//
// Identifier: application/vnd.checkdata+json; view=default
type Checkdata struct {
	Checktype *ChecktypeType `form:"checktype" json:"checktype" yaml:"checktype" xml:"checktype"`
	ID        uuid.UUID      `form:"id" json:"id" yaml:"id" xml:"id"`
	// Configuration options for the Check. It should be in JSON format
	Options  *string   `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
	Progress *float64  `form:"progress,omitempty" json:"progress,omitempty" yaml:"progress,omitempty" xml:"progress,omitempty"`
	Raw      *string   `form:"raw,omitempty" json:"raw,omitempty" yaml:"raw,omitempty" xml:"raw,omitempty"`
	Report   *string   `form:"report,omitempty" json:"report,omitempty" yaml:"report,omitempty" xml:"report,omitempty"`
	Scan     *Scandata `form:"scan,omitempty" json:"scan,omitempty" yaml:"scan,omitempty" xml:"scan,omitempty"`
	Status   string    `form:"status" json:"status" yaml:"status" xml:"status"`
	// Target to be scanned. Can be a domain, hostname, IP or URL
	Target string `form:"target" json:"target" yaml:"target" xml:"target"`
	// Webhook to callback after the Check has finished
	Webhook *string `form:"webhook,omitempty" json:"webhook,omitempty" yaml:"webhook,omitempty" xml:"webhook,omitempty"`
}

// Validate validates the Checkdata media type instance.
func (mt *Checkdata) Validate() (err error) {

	if mt.Checktype == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checktype"))
	}
	if mt.Target == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "target"))
	}
	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	if mt.Checktype != nil {
		if err2 := mt.Checktype.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Options != nil {
		if ok := goa.ValidatePattern(`^[[:print:]]+`, *mt.Options); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`response.options`, *mt.Options, `^[[:print:]]+`))
		}
	}
	if mt.Options != nil {
		if utf8.RuneCountInString(*mt.Options) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.options`, *mt.Options, utf8.RuneCountInString(*mt.Options), 2, true))
		}
	}
	if ok := goa.ValidatePattern(`^[[:print:]]+`, mt.Target); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.target`, mt.Target, `^[[:print:]]+`))
	}
	if utf8.RuneCountInString(mt.Target) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.target`, mt.Target, utf8.RuneCountInString(mt.Target), 1, true))
	}
	if mt.Webhook != nil {
		if err2 := goa.ValidateFormat(goa.FormatURI, *mt.Webhook); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.webhook`, *mt.Webhook, goa.FormatURI, err2))
		}
	}
	if mt.Webhook != nil {
		if utf8.RuneCountInString(*mt.Webhook) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.webhook`, *mt.Webhook, utf8.RuneCountInString(*mt.Webhook), 3, true))
		}
	}
	return
}

// DecodeCheckdata decodes the Checkdata instance encoded in resp body.
func (c *Client) DecodeCheckdata(resp *http.Response) (*Checkdata, error) {
	var decoded Checkdata
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Checks media type (default view)
//
// Identifier: application/vnd.checks+json; view=default
type Checks struct {
	Checks []*Scancheckdata `form:"checks" json:"checks" yaml:"checks" xml:"checks"`
}

// Validate validates the Checks media type instance.
func (mt *Checks) Validate() (err error) {
	if mt.Checks == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checks"))
	}
	for _, e := range mt.Checks {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeChecks decodes the Checks instance encoded in resp body.
func (c *Client) DecodeChecks(resp *http.Response) (*Checks, error) {
	var decoded Checks
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Checktype media type (default view)
//
// Identifier: application/vnd.checktype+json; view=default
type Checktype struct {
	Checktype *ChecktypeType `form:"checktype" json:"checktype" yaml:"checktype" xml:"checktype"`
}

// Validate validates the Checktype media type instance.
func (mt *Checktype) Validate() (err error) {
	if mt.Checktype == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checktype"))
	}
	if mt.Checktype != nil {
		if err2 := mt.Checktype.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeChecktype decodes the Checktype instance encoded in resp body.
func (c *Client) DecodeChecktype(resp *http.Response) (*Checktype, error) {
	var decoded Checktype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Checktypes media type (default view)
//
// Identifier: application/vnd.checktypes+json; view=default
type Checktypes struct {
	Checktypes []*ChecktypeType `form:"checktypes" json:"checktypes" yaml:"checktypes" xml:"checktypes"`
}

// Validate validates the Checktypes media type instance.
func (mt *Checktypes) Validate() (err error) {
	if mt.Checktypes == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checktypes"))
	}
	for _, e := range mt.Checktypes {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeChecktypes decodes the Checktypes instance encoded in resp body.
func (c *Client) DecodeChecktypes(resp *http.Response) (*Checktypes, error) {
	var decoded Checktypes
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Jobqueue media type (default view)
//
// Identifier: application/vnd.jobqueue+json; view=default
type Jobqueue struct {
	Jobqueue *Agentjobqueuedata `form:"jobqueue" json:"jobqueue" yaml:"jobqueue" xml:"jobqueue"`
}

// Validate validates the Jobqueue media type instance.
func (mt *Jobqueue) Validate() (err error) {
	if mt.Jobqueue == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "jobqueue"))
	}
	if mt.Jobqueue != nil {
		if err2 := mt.Jobqueue.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeJobqueue decodes the Jobqueue instance encoded in resp body.
func (c *Client) DecodeJobqueue(resp *http.Response) (*Jobqueue, error) {
	var decoded Jobqueue
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Scan media type (default view)
//
// Identifier: application/vnd.scan+json; view=default
type Scan struct {
	Scan *Scandata `form:"scan" json:"scan" yaml:"scan" xml:"scan"`
}

// Validate validates the Scan media type instance.
func (mt *Scan) Validate() (err error) {
	if mt.Scan == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "scan"))
	}
	return
}

// DecodeScan decodes the Scan instance encoded in resp body.
func (c *Client) DecodeScan(resp *http.Response) (*Scan, error) {
	var decoded Scan
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Scancheckdata media type (default view)
//
// Identifier: application/vnd.scancheckdata+json; view=default
type Scancheckdata struct {
	// Name of the checktype this check is
	ChecktypeName string    `form:"checktype_name" json:"checktype_name" yaml:"checktype_name" xml:"checktype_name"`
	ID            uuid.UUID `form:"id" json:"id" yaml:"id" xml:"id"`
	Status        string    `form:"status" json:"status" yaml:"status" xml:"status"`
	// Target to be scanned. Can be a domain, hostname, IP or URL
	Target string `form:"target" json:"target" yaml:"target" xml:"target"`
}

// Validate validates the Scancheckdata media type instance.
func (mt *Scancheckdata) Validate() (err error) {

	if mt.ChecktypeName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checktype_name"))
	}
	if mt.Target == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "target"))
	}
	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	if ok := goa.ValidatePattern(`^[[:print:]]+`, mt.Target); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.target`, mt.Target, `^[[:print:]]+`))
	}
	if utf8.RuneCountInString(mt.Target) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.target`, mt.Target, utf8.RuneCountInString(mt.Target), 1, true))
	}
	return
}

// DecodeScancheckdata decodes the Scancheckdata instance encoded in resp body.
func (c *Client) DecodeScancheckdata(resp *http.Response) (*Scancheckdata, error) {
	var decoded Scancheckdata
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Scandata media type (default view)
//
// Identifier: application/vnd.scandata+json; view=default
type Scandata struct {
	ID uuid.UUID `form:"id" json:"id" yaml:"id" xml:"id"`
	// Number of checks of the scan
	Size int `form:"size" json:"size" yaml:"size" xml:"size"`
}

// Validate validates the Scandata media type instance.
func (mt *Scandata) Validate() (err error) {

	return
}

// DecodeScandata decodes the Scandata instance encoded in resp body.
func (c *Client) DecodeScandata(resp *http.Response) (*Scandata, error) {
	var decoded Scandata
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Scans media type (default view)
//
// Identifier: application/vnd.scans+json; view=default
type Scans struct {
	Scans []*ScanData `form:"scans" json:"scans" yaml:"scans" xml:"scans"`
}

// Validate validates the Scans media type instance.
func (mt *Scans) Validate() (err error) {
	if mt.Scans == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "scans"))
	}
	return
}

// DecodeScans decodes the Scans instance encoded in resp body.
func (c *Client) DecodeScans(resp *http.Response) (*Scans, error) {
	var decoded Scans
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Stat media type (default view)
//
// Identifier: application/vnd.stat+json; view=default
type Stat struct {
	Status string `form:"status" json:"status" yaml:"status" xml:"status"`
	Total  int    `form:"total" json:"total" yaml:"total" xml:"total"`
}

// Validate validates the Stat media type instance.
func (mt *Stat) Validate() (err error) {
	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}

	return
}

// DecodeStat decodes the Stat instance encoded in resp body.
func (c *Client) DecodeStat(resp *http.Response) (*Stat, error) {
	var decoded Stat
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Stats media type (default view)
//
// Identifier: application/vnd.stats+json; view=default
type Stats struct {
	Checks []*Stat `form:"checks" json:"checks" yaml:"checks" xml:"checks"`
}

// Validate validates the Stats media type instance.
func (mt *Stats) Validate() (err error) {
	if mt.Checks == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checks"))
	}
	for _, e := range mt.Checks {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeStats decodes the Stats instance encoded in resp body.
func (c *Client) DecodeStats(resp *http.Response) (*Stats, error) {
	var decoded Stats
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
