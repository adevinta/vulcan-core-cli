// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "vulcan-core": Application Media Types
//
// Command:
// $ main

package client

import (
	"net/http"

	"github.com/goadesign/goa"
	uuid "github.com/goadesign/goa/uuid"
)

// Assettype media type (default view)
//
// Identifier: application/vnd.assettype+json; view=default
type Assettype struct {
	Assettype *string  `form:"assettype,omitempty" json:"assettype,omitempty" yaml:"assettype,omitempty" xml:"assettype,omitempty"`
	Name      []string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// DecodeAssettype decodes the Assettype instance encoded in resp body.
func (c *Client) DecodeAssettype(resp *http.Response) (*Assettype, error) {
	var decoded Assettype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AssettypeCollection is the media type for an array of Assettype (default view)
//
// Identifier: application/vnd.assettype+json; type=collection; view=default
type AssettypeCollection []*Assettype

// DecodeAssettypeCollection decodes the AssettypeCollection instance encoded in resp body.
func (c *Client) DecodeAssettypeCollection(resp *http.Response) (AssettypeCollection, error) {
	var decoded AssettypeCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Checkdata media type (default view)
//
// Identifier: application/vnd.checkdata+json; view=default
type Checkdata struct {
	Assettype     *string   `form:"assettype,omitempty" json:"assettype,omitempty" yaml:"assettype,omitempty" xml:"assettype,omitempty"`
	ChecktypeName string    `form:"checktype_name" json:"checktype_name" yaml:"checktype_name" xml:"checktype_name"`
	ID            uuid.UUID `form:"id" json:"id" yaml:"id" xml:"id"`
	Image         *string   `form:"image,omitempty" json:"image,omitempty" yaml:"image,omitempty" xml:"image,omitempty"`
	Options       *string   `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
	Raw           *string   `form:"raw,omitempty" json:"raw,omitempty" yaml:"raw,omitempty" xml:"raw,omitempty"`
	Report        *string   `form:"report,omitempty" json:"report,omitempty" yaml:"report,omitempty" xml:"report,omitempty"`
	Status        string    `form:"status" json:"status" yaml:"status" xml:"status"`
	Tag           *string   `form:"tag,omitempty" json:"tag,omitempty" yaml:"tag,omitempty" xml:"tag,omitempty"`
	Target        string    `form:"target" json:"target" yaml:"target" xml:"target"`
}

// Validate validates the Checkdata media type instance.
func (mt *Checkdata) Validate() (err error) {

	if mt.ChecktypeName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checktype_name"))
	}
	if mt.Target == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "target"))
	}
	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	return
}

// DecodeCheckdata decodes the Checkdata instance encoded in resp body.
func (c *Client) DecodeCheckdata(resp *http.Response) (*Checkdata, error) {
	var decoded Checkdata
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Checks media type (default view)
//
// Identifier: application/vnd.checks+json; view=default
type Checks struct {
	Checks []*Checkdata `form:"checks" json:"checks" yaml:"checks" xml:"checks"`
}

// Validate validates the Checks media type instance.
func (mt *Checks) Validate() (err error) {
	if mt.Checks == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checks"))
	}
	for _, e := range mt.Checks {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeChecks decodes the Checks instance encoded in resp body.
func (c *Client) DecodeChecks(resp *http.Response) (*Checks, error) {
	var decoded Checks
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Checktype media type (default view)
//
// Identifier: application/vnd.checktype+json; view=default
type Checktype struct {
	Checktype *ChecktypeType `form:"checktype" json:"checktype" yaml:"checktype" xml:"checktype"`
}

// Validate validates the Checktype media type instance.
func (mt *Checktype) Validate() (err error) {
	if mt.Checktype == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checktype"))
	}
	if mt.Checktype != nil {
		if err2 := mt.Checktype.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeChecktype decodes the Checktype instance encoded in resp body.
func (c *Client) DecodeChecktype(resp *http.Response) (*Checktype, error) {
	var decoded Checktype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Checktypes media type (default view)
//
// Identifier: application/vnd.checktypes+json; view=default
type Checktypes struct {
	Checktypes []*ChecktypeType `form:"checktypes" json:"checktypes" yaml:"checktypes" xml:"checktypes"`
}

// Validate validates the Checktypes media type instance.
func (mt *Checktypes) Validate() (err error) {
	if mt.Checktypes == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checktypes"))
	}
	for _, e := range mt.Checktypes {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeChecktypes decodes the Checktypes instance encoded in resp body.
func (c *Client) DecodeChecktypes(resp *http.Response) (*Checktypes, error) {
	var decoded Checktypes
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Createscandata media type (default view)
//
// Identifier: application/vnd.createscandata+json; view=default
type Createscandata struct {
	ScanID *uuid.UUID `form:"scan_id,omitempty" json:"scan_id,omitempty" yaml:"scan_id,omitempty" xml:"scan_id,omitempty"`
}

// DecodeCreatescandata decodes the Createscandata instance encoded in resp body.
func (c *Client) DecodeCreatescandata(resp *http.Response) (*Createscandata, error) {
	var decoded Createscandata
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Scandata media type (default view)
//
// Identifier: application/vnd.scandata+json; view=default
type Scandata struct {
	CheckCount *int      `form:"check_count,omitempty" json:"check_count,omitempty" yaml:"check_count,omitempty" xml:"check_count,omitempty"`
	ID         uuid.UUID `form:"id" json:"id" yaml:"id" xml:"id"`
	Status     string    `form:"status" json:"status" yaml:"status" xml:"status"`
}

// Validate validates the Scandata media type instance.
func (mt *Scandata) Validate() (err error) {

	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	return
}

// DecodeScandata decodes the Scandata instance encoded in resp body.
func (c *Client) DecodeScandata(resp *http.Response) (*Scandata, error) {
	var decoded Scandata
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Scans media type (default view)
//
// Identifier: application/vnd.scans+json; view=default
type Scans struct {
	Scans []*Scandata `form:"scans" json:"scans" yaml:"scans" xml:"scans"`
}

// Validate validates the Scans media type instance.
func (mt *Scans) Validate() (err error) {
	if mt.Scans == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "scans"))
	}
	for _, e := range mt.Scans {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeScans decodes the Scans instance encoded in resp body.
func (c *Client) DecodeScans(resp *http.Response) (*Scans, error) {
	var decoded Scans
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Stat media type (default view)
//
// Identifier: application/vnd.stat+json; view=default
type Stat struct {
	Status string `form:"status" json:"status" yaml:"status" xml:"status"`
	Total  int    `form:"total" json:"total" yaml:"total" xml:"total"`
}

// Validate validates the Stat media type instance.
func (mt *Stat) Validate() (err error) {
	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}

	return
}

// DecodeStat decodes the Stat instance encoded in resp body.
func (c *Client) DecodeStat(resp *http.Response) (*Stat, error) {
	var decoded Stat
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Stats media type (default view)
//
// Identifier: application/vnd.stats+json; view=default
type Stats struct {
	Checks []*Stat `form:"checks" json:"checks" yaml:"checks" xml:"checks"`
}

// Validate validates the Stats media type instance.
func (mt *Stats) Validate() (err error) {
	if mt.Checks == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "checks"))
	}
	for _, e := range mt.Checks {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeStats decodes the Stats instance encoded in resp body.
func (c *Client) DecodeStats(resp *http.Response) (*Stats, error) {
	var decoded Stats
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
