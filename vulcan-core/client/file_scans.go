// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "vulcan-persistence": FileScans Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
)

// UploadFileScansPath computes a request path to the upload action of FileScans.
func UploadFileScansPath() string {

	return fmt.Sprintf("/v1/filescan/")
}

// Create a scan by uploading a file using a multipart form with the scan definition
func (c *Client) UploadFileScans(ctx context.Context, path string, payload *FileScanPayload) (*http.Response, error) {
	req, err := c.NewUploadFileScansRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUploadFileScansRequest create the request corresponding to the upload action endpoint of the FileScans resource.
func (c *Client) NewUploadFileScansRequest(ctx context.Context, path string, payload *FileScanPayload) (*http.Request, error) {
	var body bytes.Buffer
	w := multipart.NewWriter(&body)
	{
		_, file := filepath.Split(payload.Upload)
		fw, err := w.CreateFormFile("upload", file)
		if err != nil {
			return nil, err
		}
		fh, err := os.Open(payload.Upload)
		if err != nil {
			return nil, err
		}
		defer fh.Close()
		if _, err := io.Copy(fw, fh); err != nil {
			return nil, err
		}
	}
	if err := w.Close(); err != nil {
		return nil, err
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", w.FormDataContentType())
	return req, nil
}
